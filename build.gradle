buildscript {
  dependencies {
    classpath("org.hidetake:gradle-ssh-plugin:2.2.0") //gradle 플러그인 의존성 추가
  }
}

plugins {
  id 'org.springframework.boot' version '2.1.4.RELEASE'
  id 'java'
  id 'war'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.hidetake.ssh'

group = 'com.setvect'
version = '0.0.1'
sourceCompatibility = '1.8'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

// 테스트 skip
test {
  exclude '**/*'
}

// war task skip 방지
war {
  enabled = true
  archiveFileName = 'BokslPortal-1.0.0.war'
}

bootWar {
  enabled = true
  archiveFileName = 'BokslPortal-1.0.0.war'
}

configurations {
  // 안 빼면 stackover flow 발생
  compile.exclude module: 'log4j-slf4j-impl'
  compile.exclude module: 'spring-boot-starter-logging'
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-log4j2'
  compile 'org.springframework.boot:spring-boot-devtools'
  compile 'org.springframework.session:spring-session-jdbc'

  compile 'com.github.bohnman:squiggly-filter-jackson:1.3.8'
  compile 'commons-configuration:commons-configuration:1.10'
  compile 'commons-io:commons-io:2.6'
  compile 'org.slf4j:slf4j-simple'
  compile 'commons-fileupload:commons-fileupload:1.4'
  compile 'com.drewnoakes:metadata-extractor:2.12.0'
  compile 'net.coobird:thumbnailator:0.4.8'
  compile 'commons-codec:commons-codec:1.13'

  compileOnly 'org.projectlombok:lombok'
  runtimeOnly 'com.h2database:h2'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testCompile 'org.springframework.boot:spring-boot-test'
  testCompile 'junit:junit'
}

task makeInstallFile() {
  group 'build'
  dependsOn ordered(":bootWar")

  doLast {
    delete("$buildDir/dist")
    copy {
      from "$buildDir/libs/BokslPortal-1.0.0.war"
      into "$buildDir/dist/lib"
    }
    copy {
      from "./script"
      include '*'
      into "$buildDir/dist/bin"
    }
    copy {
      from "./src/main/resources/application.properties"
      into "$buildDir/dist/conf"
      rename 'application.properties', 'BokslPortal.properties'
    }
    copy {
      from "./src/main/resources/log4j2.xml"
      into "$buildDir/dist/conf"
    }
  }
}

// 실행 의존서의 순서를 지키기 위함
def ordered(String... dependencyPaths) {
  def dependencies = dependencyPaths.collect { tasks.getByPath(it) }
  for (int i = 0; i < dependencies.size() - 1; i++) {
    dependencies[i + 1].mustRunAfter(dependencies[i])
  }
  return dependencies
}


task deployRemort(dependsOn: makeInstallFile) {
  group 'build'
  doLast {
    // 원격 서버 ssh 출판
    remotes {
      publicServer {
        host = project.properties["remortHost"]
        port = project.properties["remortPort"].toInteger()
        user = project.properties["remortUser"]
        identity = new File(project.properties["authFile"])
        knownHosts = allowAnyHosts //알 수 없는 호스트라도 접속 가능
      }
    }

    ssh.run {
      session(remotes.publicServer) {
        final jarName = "$buildDir/dist/lib/BokslPortal-1.0.0.war"
        println "Deploy file : ${jarName}"

        println "send start"
        put from: "${jarName}", into: project.properties["remortDir"]
        println "send complete"

        println "execute restart command: ${project.properties["restartCommand"]}"
        execute project.properties["restartCommand"]
      }
    }
  }
}

